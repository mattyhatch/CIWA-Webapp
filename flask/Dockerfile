# Dockerfile-flask
# We simply inherit the Python 3 image. This image does
# not particularly care what OS runs underneath
FROM tensorflow/tensorflow:1.14.0-py3

# Make python print in the console
ENV PYTHONUNBUFFERED 0

# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1

# Upgrade pip
RUN pip install --upgrade pip

# Expose the port uWSGI will listen on
EXPOSE 5000

# Set an environment variable with the exiftool version
ENV EXIFTOOL_VERSION=12.01

# wget http://www.sno.phy.queensu.ca/~phil/exiftool/Image-ExifTool-${EXIFTOOL_VERSION}.tar.gz

# Copy exiftool
COPY Image-ExifTool-${EXIFTOOL_VERSION}.tar.gz .

# Install exiftool
RUN tar -zxvf Image-ExifTool-${EXIFTOOL_VERSION}.tar.gz \
	&& cd Image-ExifTool-${EXIFTOOL_VERSION} \
	&& perl Makefile.PL \
	&& make test \
	&& make install \
	&& cd .. \
	&& rm -rf Image-ExifTool-${EXIFTOOL_VERSION}


	
# Set an environment variable with the directory
# where we'll be running the app
ENV APP /app

# Create the directory and instruct Docker to operate
# from there from now on
RUN mkdir $APP
WORKDIR $APP


# Copy the requirements file in order to install
# Python dependencies
COPY requirements.txt .

# Install Python dependencies
RUN pip install -r requirements.txt

# We copy the rest of the codebase into the image
COPY . .

RUN mkdir -p /vol/web/media/Flir_Images /vol/web/media/Visual_Images /vol/web/media/Thermal_Images /vol/web/media/Csv_Files /vol/web/media/Predictions /vol/web/media/Visual_Images_nocrop

# Finally, we run uWSGI with the ini file we
# created earlier
CMD [ "uwsgi", "--ini", "app.ini" ]
